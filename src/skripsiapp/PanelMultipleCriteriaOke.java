package skripsiapp;

import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryExecutionFactory;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.query.ResultSet;
import com.hp.hpl.jena.query.ResultSetFactory;
import com.hp.hpl.jena.query.ResultSetRewindable;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;
import oopn.Ontology;

/**
 *
 * @author dhealf
 */
public class PanelMultipleCriteriaOke extends javax.swing.JPanel {

    String[] arrayProperty = null;
    QueryExecution qe;
    QueryExecution qeCopy;
    ResultSet resultSet;
    ResultSet resultSetCopy;
    static JPanel panel = new JPanel();
    JComboBox[] acb = new JComboBox[100];
    JTextField[] atf = new JTextField[100];
    JButton[] abf = new JButton[100];
    static Integer indexer = 1;
    static List<JLabel> listOfLabels = new ArrayList<JLabel>();
    static List<JComboBox> listOfComboBox = new ArrayList<JComboBox>();
    static List<JTextField> listOfTextFields = new ArrayList<JTextField>();
    static List<JButton> listOfButtonRemove = new ArrayList<JButton>();

    /**
     * Creates new form PanelMultipleCriteria
     */
    public PanelMultipleCriteriaOke() {
        if (Ontology.ontologyFile != null) {
            initComponents();
            for (int i = 0; i < 100; i++) {
                acb[i] = new JComboBox();
                if (arrayProperty == null) {
                    acb[i].setModel(new javax.swing.DefaultComboBoxModel(this.getArrayProp(cboxWhatvar.getSelectedItem().toString())));
                } else {
                    acb[i].setModel(new javax.swing.DefaultComboBoxModel(arrayProperty));
                }
            }

            for (int i = 0; i < 100; i++) {
                atf[i] = new JTextField(20);
            }

            for (int i = 0; i < 100; i++) {
                final int ind = i;

                abf[i] = new JButton("X");
                abf[i].addActionListener(
                        new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                try {
                                    btnRemove(evt, atf[ind], acb[ind], abf[ind], ind);
                                } catch (Exception ex) {
                                    System.out.println(ex);
                                }
                            }
                        });
                System.out.println("HASILNYA :" + atf[ind]);
            }
//            panelSearch = new MsPanelNutrisi();
//            panelSearch.repaint();
//            scrolMultipleSearch.setViewportView(panelSearch);
//            panelSearch.setAutoscrolls(true);
        } else {
            JOptionPane.showMessageDialog(this, "Please upload your ontology file first!");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cboxWhatvar = new javax.swing.JComboBox();
        scrolKriteria = new javax.swing.JScrollPane();
        panelKriteria = new javax.swing.JPanel();
        btnAddKriteria = new javax.swing.JButton();
        btnCopy = new javax.swing.JButton();
        btnRunSparql = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaSparql = new javax.swing.JTextArea();
        scrolSparqlResult = new javax.swing.JScrollPane();
        sparqlResultsTable = new javax.swing.JTable();
        btnEdit = new javax.swing.JButton();

        jLabel1.setText("Want to search About?");

        cboxWhatvar.setModel(new javax.swing.DefaultComboBoxModel(this.getArrayClass()));
        cboxWhatvar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboxWhatvarItemStateChanged(evt);
            }
        });
        cboxWhatvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxWhatvarActionPerformed(evt);
            }
        });

        panelKriteria.setBorder(javax.swing.BorderFactory.createTitledBorder("Criteria"));

        javax.swing.GroupLayout panelKriteriaLayout = new javax.swing.GroupLayout(panelKriteria);
        panelKriteria.setLayout(panelKriteriaLayout);
        panelKriteriaLayout.setHorizontalGroup(
            panelKriteriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );
        panelKriteriaLayout.setVerticalGroup(
            panelKriteriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );

        scrolKriteria.setViewportView(panelKriteria);

        btnAddKriteria.setText("Add Kriteria");
        btnAddKriteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddKriteriaActionPerformed(evt);
            }
        });

        btnCopy.setText("Copy SPARQL");
        btnCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyActionPerformed(evt);
            }
        });

        btnRunSparql.setText("Search");
        btnRunSparql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunSparqlActionPerformed(evt);
            }
        });

        txtAreaSparql.setEditable(false);
        txtAreaSparql.setColumns(20);
        txtAreaSparql.setRows(5);
        txtAreaSparql.setEnabled(false);
        jScrollPane1.setViewportView(txtAreaSparql);

        sparqlResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Result"
            }
        ));
        scrolSparqlResult.setViewportView(sparqlResultsTable);

        btnEdit.setText("Edit SPARQL");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrolSparqlResult)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnAddKriteria, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cboxWhatvar, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnRunSparql, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(scrolKriteria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(btnCopy)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEdit)
                                .addGap(0, 35, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboxWhatvar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddKriteria)
                            .addComponent(btnRunSparql)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCopy)
                            .addComponent(btnEdit))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(scrolKriteria, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(scrolSparqlResult, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cboxWhatvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxWhatvarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboxWhatvarActionPerformed

    private void btnRemove(java.awt.event.ActionEvent evt, JTextField atf, JComboBox acb, JButton self, int ind) throws Exception {
        System.out.println("ind is : " + ind);
        System.out.println(acb);
        Container parent = atf.getParent();
        parent.remove(atf);
        parent.validate();
        parent.repaint();
        listOfTextFields.remove(atf);
        Container parent1 = acb.getParent();
        parent1.remove(acb);
        parent1.validate();
        parent1.repaint();
        listOfComboBox.remove(acb);
        Container parent2 = self.getParent();
        parent2.remove(self);
        parent2.validate();
        parent2.repaint();
        listOfButtonRemove.remove(self);
        indexer = indexer - 1;
    }
    private void btnAddKriteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddKriteriaActionPerformed
        // TODO add your handling code here:
//        for (int i = 0; i < 100; i++) {
//            acb[i] = new JComboBox();
//            //if (arrayProperty == null) {
//               // acb[i].setModel(new javax.swing.DefaultComboBoxModel(this.getArrayProp(cboxWhatvar.getSelectedItem().toString())));
//           // } else {
//             //   acb[i].setModel(new javax.swing.DefaultComboBoxModel(arrayProperty));
//            //}
//        }
        panel.setPreferredSize(new Dimension(200, 900));
        panel.setLayout(new GridBagLayout());
        panel.setBorder(LineBorder.createBlackLineBorder());
        panel.removeAll();
        // Create label and text field


//        abf[indexer].addActionListener(
//                new java.awt.event.ActionListener() {
//                    public void actionPerformed(java.awt.event.ActionEvent evt) {
//                        try {
//                            btnRemove(evt, atf[indexer], acb[indexer], abf[indexer], indexer);
//                        } catch (Exception ex) {
//                            System.out.println(ex);
//                        }
//                    }
//                });

        listOfComboBox.add(acb[indexer]);
        listOfTextFields.add(atf[indexer]);
        listOfButtonRemove.add(abf[indexer]);

        // Create constraints
        GridBagConstraints comboBoxConstraints = new GridBagConstraints();
        GridBagConstraints textFieldConstraints = new GridBagConstraints();
        GridBagConstraints buttonConstraints = new GridBagConstraints();

        // Add labels and text fields
        for (int i = 0; i < indexer; i++) {

            buttonConstraints.gridx = 2;
            buttonConstraints.gridy = i;

            // Text field constraints
            textFieldConstraints.gridx = 1;
            textFieldConstraints.gridy = i;

            // Label constraints
//            labelConstraints.gridx = 0;
//            labelConstraints.gridy = i;

            comboBoxConstraints.gridx = 0;
            comboBoxConstraints.gridy = i;

            // Add them to panel
//            panel.add(listOfLabels.get(i), labelConstraints);
            panel.add(listOfTextFields.get(i), textFieldConstraints);
            panel.add(listOfComboBox.get(i), comboBoxConstraints);
            panel.add(listOfButtonRemove.get(i), buttonConstraints);
        }

        // Align components top-to-bottom
        GridBagConstraints c = new GridBagConstraints();
//        JLabel a=new JLabel("DEWI");
        c.gridx = 0;
        c.gridy = indexer;
        c.weighty = 1;
        panel.add(new JLabel(""), c);
        panel.revalidate();
        panel.repaint();
        System.out.println("Oke " + indexer);

        // Increment indexer
        indexer++;
        panelKriteria = panel;
        panelKriteria.repaint();
        scrolKriteria.setViewportView(panelKriteria);
        panelKriteria.setAutoscrolls(true);
    }//GEN-LAST:event_btnAddKriteriaActionPerformed

    private void btnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyActionPerformed
        // TODO add your handling code here:
        oopn.Ontology.copiedText = txtAreaSparql.getText();
        JOptionPane.showMessageDialog(this, "Text copied!");
    }//GEN-LAST:event_btnCopyActionPerformed

    private void cboxWhatvarItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboxWhatvarItemStateChanged
        // TODO add your handling code here:
        panel = new JPanel();
        listOfLabels = new ArrayList<JLabel>();
        listOfComboBox = new ArrayList<JComboBox>();
        listOfTextFields = new ArrayList<JTextField>();
        listOfButtonRemove = new ArrayList<JButton>();
        panelKriteria = panel;
        panelKriteria.repaint();
        scrolKriteria.setViewportView(panelKriteria);
        panelKriteria.setAutoscrolls(true);
        indexer = 1;
        txtAreaSparql.setText("");
        String prefix = "PREFIX owl:<http://www.w3.org/2002/07/owl#>\n"
                + "PREFIX xsd:<http://www.w3.org/2001/XMLSchema#>\n"
                + "PREFIX owl2xml:<http://www.w3.org/2006/12/owl2-xml#>\n"
                + "PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\n"
                + "PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n"
                + "PREFIX oopn:<http://www.ontology.dhealf.com/pediatric/pno.owl#>\n";
        String queryString = "SELECT ?" + cboxWhatvar.getSelectedItem().toString() + " ";
        String where = "WHERE { ?" + cboxWhatvar.getSelectedItem().toString() + " rdfs:subClassOf oopn:" + cboxWhatvar.getSelectedItem().toString() + " } \n";
        txtAreaSparql.setText(prefix + queryString + where);
//        JOptionPane.showMessageDialog(this, "Change");
    }//GEN-LAST:event_cboxWhatvarItemStateChanged

    private void btnRunSparqlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunSparqlActionPerformed
        // TODO add your handling code here:
        String kriteria, konten, queryString, where, prefix;
        prefix = "PREFIX owl:<http://www.w3.org/2002/07/owl#>\n"
                + "PREFIX xsd:<http://www.w3.org/2001/XMLSchema#>\n"
                + "PREFIX owl2xml:<http://www.w3.org/2006/12/owl2-xml#>\n"
                + "PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\n"
                + "PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n"
                + "PREFIX oopn:<http://www.ontology.dhealf.com/pediatric/pno.owl#>\n";
        queryString = "SELECT distinct ?" + cboxWhatvar.getSelectedItem().toString().replace(" ", "_") + " ";
        where = "WHERE { ?" + cboxWhatvar.getSelectedItem().toString().replace(" ", "_") + " rdf:type ?superClass.\n"
                + "?superClass rdfs:subClassOf* oopn:" + cboxWhatvar.getSelectedItem().toString().replace(" ", "_") + " . \n";
        for (int i = 0; i < indexer - 1; i++) {
            kriteria = listOfComboBox.get(i).getSelectedItem().toString();
            konten = listOfTextFields.get(i).getText();
            System.out.println("Kriteria-" + i + "(" + kriteria + ")" + ": " + konten);
            queryString = queryString + " ?" + kriteria.replace(" ", "_") + " ";
            where += "?" + cboxWhatvar.getSelectedItem().toString().replace(" ", "_") + " oopn:" + kriteria.replace(" ", "_")
                    + " ?" + kriteria.replace(" ", "_") + ".\n"
                    + "FILTER regex(str(?" + kriteria.replace(" ", "_") + "), \"" + konten.replace(" ", "_") + "\").\n";

        }
        queryString = prefix + queryString + where + "} ORDER BY ?" + cboxWhatvar.getSelectedItem().toString().replace(" ", "_");
        txtAreaSparql.setText(queryString);
        System.out.println("QUERY \n" + queryString);

        Query query = QueryFactory.create(queryString);
        qe = QueryExecutionFactory.create(query, oopn.Ontology.ontologyModel);
        qeCopy = QueryExecutionFactory.create(query, oopn.Ontology.ontologyModel);

        resultSet = qe.execSelect();
        resultSetCopy = qeCopy.execSelect();
        // Output query results    

        //ResultSetFormatter.out(System.out, resultSet, query);
        String[] labels;
        String[][] data_table;;
        int a, b, c;
        int column;
        ResultSetRewindable rsrw = ResultSetFactory.copyResults(resultSetCopy);
        int row = rsrw.size();

        //to get variable
        String[] varq = queryString.split("SELECT")[1].split("WHERE")[0].split("\\?");
        if (varq == null) {
            varq = queryString.split("Select")[1].split("Where")[0].split("\\?");
        }
        if (varq == null) {
            varq = queryString.split("select")[1].split("where")[0].split("\\?");
        }
        System.out.println("List var: ");
        labels = new String[varq.length - 1];
        column = varq.length - 1;
        data_table = new String[row][column];
        for (int q = 1; q < varq.length; q++) {
            System.out.println("var : " + varq[q].trim());
            labels[q - 1] = varq[q].trim();
        }
        System.out.println("column " + column);
        System.out.println("row " + row);

        a = 0;
        while (resultSet.hasNext()) {
            QuerySolution qsol = resultSet.next();
            System.out.println("================================================");
            for (b = 0; b < column; b++) {
                System.out.println("b " + b + "---" + labels[b]);
                data_table[a][b] = qsol.get(labels[b]).toString().replace("http://www.ontology.dhealf.com/pediatric/pno.owl#", "").replace("_", " ").replace("^^http://www.w3.org/2001/XMLSchema#float", "").
                        replace("^^http://www.w3.org/2001/XMLSchema#decimal", "").replace("^^http://www.w3.org/2001/XMLSchema#integer", queryString);
            }
            a++;
        }

//        while (resultSet.hasNext()) {
//            QuerySolution qsol = resultSet.next();
//            for (b = 0; b < column; b++) {
//                String[] as = qsol.get(labels[b]).toString().split("#");
//                System.out.println("ASLI! " + qsol.get(labels[b]).toString());
//                if (as == null) {
//                    data_table[a][b] = "error parah";
//                } else if (as[1] == null) {
//                    data_table[a][b] = "error";
//                } else {
//                    data_table[a][b] = as[1].split(">")[0].replace('_', ' ');
//                }
//                System.out.println("aslinya : " + qsol.get(labels[b]).toString());
//                System.out.println("Palsunya :" + data_table[a][b]);
//            }
//            a++;
//        }


        //sparqlResultsTable.setModel(new SparqlTableModel(resultSet));
        sparqlResultsTable.setModel(new DefaultTableModel(data_table, labels));
        qe.close();

    }//GEN-LAST:event_btnRunSparqlActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        txtAreaSparql.setEnabled(true);
        txtAreaSparql.setEditable(true);
    }//GEN-LAST:event_btnEditActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddKriteria;
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRunSparql;
    private javax.swing.JComboBox cboxWhatvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelKriteria;
    private javax.swing.JScrollPane scrolKriteria;
    private javax.swing.JScrollPane scrolSparqlResult;
    private javax.swing.JTable sparqlResultsTable;
    private javax.swing.JTextArea txtAreaSparql;
    // End of variables declaration//GEN-END:variables

    String[] getArrayClass() {
        String[] returnValue;
        QueryExecution qe;
        QueryExecution qeCopy;
        ResultSet resultSet;
        ResultSet resultSetCopy;
        String queryString = "PREFIX owl:<http://www.w3.org/2002/07/owl#>\n"
                + "PREFIX xsd:<http://www.w3.org/2001/XMLSchema#>\n"
                + "PREFIX owl2xml:<http://www.w3.org/2006/12/owl2-xml#>\n"
                + "PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\n"
                + "PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n"
                + "PREFIX oopn:<http://www.ontology.dhealf.com/pediatric/pno.owl#>"
                + "SELECT ?kelas WHERE {?kelas a owl:Class"
                + "} ORDER BY ?kelas";

        Query query = QueryFactory.create(queryString);
        qe = QueryExecutionFactory.create(query, oopn.Ontology.ontologyModel);
        qeCopy = QueryExecutionFactory.create(query, oopn.Ontology.ontologyModel);
        resultSet = qe.execSelect();
        resultSetCopy = qeCopy.execSelect();
        // Output query results    

        //ResultSetFormatter.out(System.out, resultSet, query);
        String[] labels;
        String[][] data_table;
        ;
        int a, b, c;
        int column;
        ResultSetRewindable rsrw = ResultSetFactory.copyResults(resultSetCopy);
        int row = rsrw.size();
        returnValue = new String[row];
        System.out.println("YOUR ROW IS : " + row);
        //to get variable
        String[] varq = queryString.split("SELECT")[1].split("WHERE")[0].split("\\?");

        System.out.println("List var: ");
        labels = new String[varq.length - 1];
        column = varq.length - 1;
        data_table = new String[row][column];
        for (int q = 1;
                q < varq.length;
                q++) {
            System.out.println("var : " + varq[q].trim());
            labels[q - 1] = varq[q].trim();
        }

        System.out.println(
                "column :" + column);
        System.out.println(
                "row :" + row);

        a = 0;
        while (resultSet.hasNext()) {
            QuerySolution qsol = resultSet.next();
            for (b = 0; b < column; b++) {
                if (qsol.get(labels[b]).toString().startsWith("http")) {
                    String[] as = qsol.get(labels[b]).toString().split("#");
                    data_table[a][b] = as[1].split(">")[0].replace('_', ' ');
                    System.out.println(a + ") real result -> " + qsol.get(labels[b]).toString());
                    returnValue[a] = data_table[a][b];
                }
            }
            a++;
        }

        //sparqlResultsTable.setModel(new SparqlTableModel(resultSet));
//        sparqlResultsTable.setModel(new DefaultTableModel(data_table, labels));
        qe.close();
        return returnValue;
    }

    String[] getArrayProp(String selectedClass) {
        QueryExecution qe;
        QueryExecution qeCopy;
        ResultSet resultSet;
        ResultSet resultSetCopy;
        String queryString = "PREFIX owl:<http://www.w3.org/2002/07/owl#>\n"
                + "PREFIX xsd:<http://www.w3.org/2001/XMLSchema#>\n"
                + "PREFIX owl2xml:<http://www.w3.org/2006/12/owl2-xml#>\n"
                + "PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\n"
                + "PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n"
                + "PREFIX oopn:<http://www.ontology.dhealf.com/pediatric/pno.owl#>\n"
                + "SELECT distinct ?property WHERE {"
                + "{?property a owl:AnnotationProperty} UNION"
                + "{?property a owl:DatatypeProperty} UNION"
                + "{?property a owl:ObjectProperty}}"
                + "ORDER BY ?property";
        System.out.println("Quistr \n" + queryString);
        Query query = QueryFactory.create(queryString);
        qe = QueryExecutionFactory.create(query, oopn.Ontology.ontologyModel);
        qeCopy = QueryExecutionFactory.create(query, oopn.Ontology.ontologyModel);

        resultSet = qe.execSelect();
        resultSetCopy = qeCopy.execSelect();
        // Output query results    

        //ResultSetFormatter.out(System.out, resultSet, query);
        String[] labels;
        String[][] data_table;;
        int a, b, c;
        int column;
        ResultSetRewindable rsrw = ResultSetFactory.copyResults(resultSetCopy);
        int row = rsrw.size();
        String[] retValue = new String[row];
        //to get variable
        String[] varq = queryString.split("SELECT")[1].split("WHERE")[0].split("\\?");
        if (varq == null) {
            varq = queryString.split("Select")[1].split("Where")[0].split("\\?");
        }
        if (varq == null) {
            varq = queryString.split("select")[1].split("where")[0].split("\\?");
        }
        System.out.println("List var: ");
        labels = new String[varq.length - 1];
        column = varq.length - 1;
        data_table = new String[row][column];
        for (int q = 1; q < varq.length; q++) {
            System.out.println("var : " + varq[q].trim());
            labels[q - 1] = varq[q].trim();
        }
        System.out.println("column " + column);
        System.out.println("row " + row);

        a = 0;

        /*
         * 
         * while (resultSet.hasNext()) {
         QuerySolution qsol = resultSet.next();
         System.out.println("================================================");
         for (b = 0; b < column; b++) {
         System.out.println("b " + b + "---" + labels[b]);
         data_table[a][b] = qsol.get(labels[b]).toString().replace("http://www.ontology.dhealf.com/pediatric/pno.owl#", "").replace("_", " ").replace("^^http://www.w3.org/2001/XMLSchema#float", "").
         replace("^^http://www.w3.org/2001/XMLSchema#decimal", "").replace("^^http://www.w3.org/2001/XMLSchema#integer", queryString);
         }
         a++;
         }
         */
        while (resultSet.hasNext()) {
            QuerySolution qsol = resultSet.next();
            for (b = 0; b < column; b++) {
                String[] as = qsol.get(labels[b]).toString().split("#");
                System.out.println("ASLI! " + qsol.get(labels[b]).toString());
                if (as == null) {
                    data_table[a][b] = "error parah";
                } else if (as[1] == null) {
                    data_table[a][b] = "error";
                } else {
                    data_table[a][b] = as[1].split(">")[0].replace('_', ' ');
                    retValue[a] = as[1].split(">")[0].replace('_', ' ');
                }
                System.out.println("aslinya : " + qsol.get(labels[b]).toString());
                System.out.println("Palsunya :" + data_table[a][b]);
            }
            a++;
        }


        //sparqlResultsTable.setModel(new SparqlTableModel(resultSet));
//        sparqlResultsTable.setModel(new DefaultTableModel(data_table, labels));
        qe.close();
        arrayProperty = retValue;
        return retValue;
    }
}
