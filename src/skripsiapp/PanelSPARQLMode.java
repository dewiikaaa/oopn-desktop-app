/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package skripsiapp;

import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryExecutionFactory;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.query.ResultSet;
import com.hp.hpl.jena.query.ResultSetFactory;
import com.hp.hpl.jena.query.ResultSetRewindable;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import oopn.Ontology;

/**
 *
 * @author dhealf
 */
public class PanelSPARQLMode extends javax.swing.JPanel {

    /**
     * Creates new form PanelSPARQLMode
     */
    public PanelSPARQLMode() throws Exception {
        if (Ontology.ontologyFile != null) {
            initComponents();
            txtAreaSparql.setText("PREFIX owl:<http://www.w3.org/2002/07/owl#>\n"
                    + "PREFIX xsd:<http://www.w3.org/2001/XMLSchema#>\n"
                    + "PREFIX owl2xml:<http://www.w3.org/2006/12/owl2-xml#>\n"
                    + "PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>\n"
                    + "PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n"
                    + "PREFIX oopn:<http://www.ontology.dhealf.com/pediatric/pno.owl#>\n");
        } else {
            JOptionPane.showMessageDialog(this, "Please upload your ontology file first!");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaSparql = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        sparqlResultsTable = new javax.swing.JTable();
        btnRunSpaqrl = new javax.swing.JButton();

        txtAreaSparql.setColumns(20);
        txtAreaSparql.setRows(5);
        jScrollPane1.setViewportView(txtAreaSparql);

        jLabel1.setText("Input your SPARQL Query");

        sparqlResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(sparqlResultsTable);

        btnRunSpaqrl.setText("Run Query");
        btnRunSpaqrl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunSpaqrlActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRunSpaqrl, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRunSpaqrl)
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRunSpaqrlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunSpaqrlActionPerformed
        // TODO add your handling code here:
        sparqlResultsTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                    {"Empty Result"},
                    {"Empty Result"},},
                new String[]{
                    "Default Result"
                }));
//        try {
        
        String queryString = txtAreaSparql.getText().trim();
        queryString=queryString.replaceAll("select", "SELECT");
        queryString=queryString.replaceAll("where", "WHERE");
        //cetak di console
        System.out.println("QUERYMU \n" + queryString);
        //execute query
        Query query = QueryFactory.create(queryString);
        qe = QueryExecutionFactory.create(query, oopn.Ontology.ontologyModel);
        qeCopy = QueryExecutionFactory.create(query, oopn.Ontology.ontologyModel);

        resultSet = qe.execSelect();
        resultSetCopy = qeCopy.execSelect();
        // Output query results    

        //ResultSetFormatter.out(System.out, resultSet, query);
        String[] labels;
        String[][] data_table;;
        int a, b, c;
        int column;
        ResultSetRewindable rsrw = ResultSetFactory.copyResults(resultSetCopy);
        int row = rsrw.size();

        //to get variable
        String[] varq = queryString.split("SELECT")[1].split("WHERE")[0].split("\\?");
        if (varq.length == 1) {
            varq = queryString.split("Select")[1].split("Where")[0].split("\\?");
        }
        if (varq.length == 1) {
            varq = queryString.split("select")[1].split("where")[0].split("\\?");
        }
        System.out.println("List var: ");
        //alokasi space labels untuk variabel
        labels = new String[varq.length - 1];
        //hitung banyak kolom sesuai banyak variabel
        column = varq.length - 1;
        data_table = new String[row][column];
        for (int q = 1; q < varq.length; q++) {
            System.out.println("var : " + varq[q].trim());
            labels[q - 1] = varq[q].trim();
        }
        System.out.println("column " + column);
        System.out.println("row " + row);

        a = 0;
        while (resultSet.hasNext()) {
            QuerySolution qsol = resultSet.next();
            System.out.println("================================================");
            for (b = 0; b < column; b++) {
                System.out.println("b " + b + "---" + labels[b]);
                data_table[a][b] = qsol.get(labels[b]).toString().replace("http://www.ontology.dhealf.com/pediatric/pno.owl#", "").replace("_", " ").replace("^^http://www.w3.org/2001/XMLSchema#float", "").
                        replace("^^http://www.w3.org/2001/XMLSchema#decimal", "").replace("^^http://www.w3.org/2001/XMLSchema#integer", queryString);
                System.out.println("Halo here "+data_table[a][b]);
            }
            
            a++;
        }


        //sparqlResultsTable.setModel(new SparqlTableModel(resultSet));
        sparqlResultsTable.setModel(new DefaultTableModel(data_table, labels));
        qe.close();
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(this, "Error \n" + e);
//        }
    }//GEN-LAST:event_btnRunSpaqrlActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRunSpaqrl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable sparqlResultsTable;
    private javax.swing.JTextArea txtAreaSparql;
    // End of variables declaration//GEN-END:variables
    QueryExecution qe;
    QueryExecution qeCopy;
    ResultSet resultSet;
    ResultSet resultSetCopy;
}
